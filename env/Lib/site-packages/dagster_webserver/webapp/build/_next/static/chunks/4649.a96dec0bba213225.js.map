{"version":3,"file":"static/chunks/4649.a96dec0bba213225.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStepStatusDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTerminationDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillActionsMenu.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRow.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStatusTagForPage.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsRequestedDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTable.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionRunList.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionStepStatus.tsx","webpack://_N_E/../ui-core/src/partitions/RunMatrixUtils.tsx","webpack://_N_E/../ui-core/src/partitions/useMatrixData.tsx","webpack://_N_E/../ui-core/src/partitions/usePartitionStepQuery.tsx","webpack://_N_E/../ui-core/src/runs/mergeStatusToBackground.tsx","webpack://_N_E/../ui-core/src/runs/RunTimeline.tsx","webpack://_N_E/../ui-core/src/runs/batchRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulerInfo.tsx","webpack://_N_E/../ui-core/src/schedules/makeScheduleKey.tsx","webpack://_N_E/../ui-core/src/sensors/SensorStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/AssetSensorTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/SensorAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPageAutomaterialize.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-components/src/components/DisclosureTriangleButton.tsx","webpack://_N_E/../ui-core/src/sensors/SensorTargetList.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/ui/CheckAllBox.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useInstigationStatusFilter.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICK_FRAGMENT = gql`\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  ${ASSET_DAEMON_TICK_FRAGMENT}\n`;\n","import {\n  Body2,\n  Box,\n  ButtonGroup,\n  ButtonLink,\n  Checkbox,\n  CursorHistoryControls,\n  CursorPaginationProps,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\ninterface Props {\n  loading: boolean;\n  ticks: AssetDaemonTickFragment[];\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  paginationProps: CursorPaginationProps;\n}\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  loading,\n  ticks,\n  statuses,\n  setStatuses,\n  setSelectedTick,\n  setTableView,\n  paginationProps,\n}: Props) => {\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <ButtonGroup\n            activeItems={new Set(['evaluations'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n          {loading && !ticks?.length ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.STARTED}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SUCCESS}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.FAILURE}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SKIPPED}\n          />\n        </Box>\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {ticks.map((tick, index) => {\n            // This is a hack for ticks that get stuck in started\n            const isTickStuckInStartedState =\n              index !== 0 &&\n              tick.status === InstigationTickStatus.STARTED &&\n              !paginationProps.hasPrevCursor;\n\n            return (\n              <tr key={tick.id}>\n                <td>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </td>\n                <td>\n                  <TickStatusTag tick={tick} isStuckStarted={isTickStuckInStartedState} />\n                </td>\n                <td>\n                  {isTickStuckInStartedState ? (\n                    ' - '\n                  ) : (\n                    <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                  )}\n                </td>\n                <td>\n                  {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                    tick.status,\n                  ) ? (\n                    <ButtonLink\n                      onClick={() => {\n                        setSelectedTick(tick);\n                      }}\n                    >\n                      <Body2>\n                        {tick.requestedAssetMaterializationCount} materializations requested\n                      </Body2>\n                    </ButtonLink>\n                  ) : (\n                    ' - '\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nconst StatusLabels = {\n  [InstigationTickStatus.SKIPPED]: 'None requested',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n};\n\nfunction StatusCheckbox({\n  status,\n  statuses,\n  setStatuses,\n}: {\n  status: InstigationTickStatus;\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n}) {\n  return (\n    <Checkbox\n      label={StatusLabels[status]}\n      checked={statuses.has(status)}\n      onChange={() => {\n        const newStatuses = new Set(statuses);\n        if (statuses.has(status)) {\n          newStatuses.delete(status);\n        } else {\n          newStatuses.add(status);\n        }\n        setStatuses(newStatuses);\n      }}\n    />\n  );\n}\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Caption, Colors, Icon, Spinner, Subtitle2} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {memo, useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/AutomaterializationTickDetailDialog.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {AssetKeyInput, InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {HeaderCell, HeaderRow, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../../workspace/workspacePath';\nimport {AssetLink} from '../AssetLink';\nimport {\n  AssetKeysDialog,\n  AssetKeysDialogEmptyState,\n  AssetKeysDialogHeader,\n} from '../AutoMaterializePolicyPage/AssetKeysDialog';\nimport {assetDetailsPathForKey} from '../assetDetailsPathForKey';\n\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const AutomaterializationTickDetailDialog = memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    const [queryString, setQueryString] = useState('');\n\n    const filteredAssetKeys = useMemo(\n      () =>\n        tick\n          ? tick.requestedAssetKeys.filter((assetKey) =>\n              assetKey.path.join('/').includes(queryString),\n            )\n          : [],\n      [tick, queryString],\n    );\n\n    const count = tick?.requestedAssetKeys.length || 0;\n\n    const parentRef = useRef<HTMLDivElement | null>(null);\n    const rowVirtualizer = useVirtualizer({\n      count: filteredAssetKeys.length,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 34,\n      overscan: 10,\n    });\n    const totalHeight = rowVirtualizer.getTotalSize();\n    const items = rowVirtualizer.getVirtualItems();\n\n    const assetKeyToPartitionsMap = useMemo(() => {\n      const map: Record<string, string[]> = {};\n      tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n        map[tokenForAssetKey(assetKey)] = partitionKeys;\n      });\n      return map;\n    }, [tick?.requestedMaterializationsForAssets]);\n\n    const content = useMemo(() => {\n      if (queryString && !filteredAssetKeys.length) {\n        return (\n          <AssetKeysDialogEmptyState\n            title=\"No matching asset keys\"\n            description={\n              <>\n                No matching asset keys for <strong>{queryString}</strong>\n              </>\n            }\n          />\n        );\n      }\n      if (!tick?.requestedAssetKeys.length) {\n        return (\n          <Box padding={{vertical: 12, horizontal: 24}}>\n            <Caption color={Colors.textLight()}>None</Caption>\n          </Box>\n        );\n      }\n      return (\n        <div style={{overflow: 'scroll'}} ref={parentRef}>\n          <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n            <HeaderCell>Asset</HeaderCell>\n            <HeaderCell>Group</HeaderCell>\n            <HeaderCell>Result</HeaderCell>\n          </HeaderRow>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const assetKey = filteredAssetKeys[index]!;\n              return (\n                <AssetDetailRow\n                  key={key}\n                  $height={size}\n                  $start={start}\n                  assetKey={assetKey}\n                  partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                  evaluationId={tick.autoMaterializeAssetEvaluationId!}\n                />\n              );\n            })}\n          </Inner>\n        </div>\n      );\n    }, [assetKeyToPartitionsMap, filteredAssetKeys, items, queryString, tick, totalHeight]);\n\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <AssetKeysDialogHeader\n            title={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n            showSearch={count > 0}\n            placeholder=\"Filter by asset key…\"\n            queryString={queryString}\n            setQueryString={setQueryString}\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <>\n                <Box\n                  padding={{vertical: 12, horizontal: 24}}\n                  border={filteredAssetKeys.length > 0 ? undefined : 'bottom'}\n                >\n                  <Subtitle2>Materializations requested</Subtitle2>\n                </Box>\n                {content}\n              </>\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: number;\n}) => {\n  const numMaterializations = partitionKeys?.length || 1;\n  const queryResult = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const {data} = queryResult;\n  useBlockTraceOnQueryResult(queryResult, 'AssetGroupAndLocationQuery');\n\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.textLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.textLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          <Link\n            to={assetDetailsPathForKey(assetKey, {\n              view: 'automation',\n              evaluation: `${evaluationId}`,\n            })}\n          >\n            {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'} requested\n          </Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Box, ButtonGroup, CursorHistoryControls} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {RunTable} from '../../runs/RunTable';\nimport {RUNS_ROOT_QUERY} from '../../runs/RunsRoot';\nimport {RunsRootQuery, RunsRootQueryVariables} from '../../runs/types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  filterTags,\n  setTableView,\n}: {\n  filterTags?: {key: string; value: string}[];\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [...(filterTags || []), {key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'RunsRootQuery');\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {BackfillStepStatusDialogBackfillFragment} from './types/BackfillStepStatusDialog.types';\nimport {PartitionPerOpStatus} from '../../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {RunFilterToken} from '../../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../../workspace/types';\n\ninterface Props {\n  backfill?: BackfillStepStatusDialogBackfillFragment;\n  onClose: () => void;\n}\n\nexport function backfillCanShowStepStatus(\n  backfill?: BackfillStepStatusDialogBackfillFragment,\n): backfill is BackfillStepStatusDialogBackfillFragment & {\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n} {\n  return !!backfill && backfill.partitionSet !== null && backfill.partitionNames !== null;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfillCanShowStepStatus(backfill)) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillStepStatusDialogBackfillFragment on PartitionBackfill {\n    id\n    partitionNames\n    partitionSet {\n      name\n      pipelineName\n      repositoryOrigin {\n        repositoryName\n        repositoryLocationName\n      }\n    }\n  }\n`;\n\ninterface ContentProps {\n  backfill: BackfillStepStatusDialogBackfillFragment;\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = useState(60);\n  const [offset, setOffset] = useState<number>(0);\n\n  const runsFilter = useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, Dialog, DialogBody, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {\n  BackfillTerminationDialogBackfillFragment,\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {cancelableStatuses} from '../../runs/RunStatuses';\nimport {TerminationDialog} from '../../runs/TerminationDialog';\n\ninterface Props {\n  backfill?: BackfillTerminationDialogBackfillFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const unfinishedMap = useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses?.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions?.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={\n          !!backfill &&\n          backfill.status !== BulkActionStatus.CANCELED &&\n          (backfill.isAssetBackfill || !!numUnscheduled)\n        }\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        {backfill.isAssetBackfill ? (\n          <DialogBody>\n            Confirm cancellation of asset backfill? This will mark unfinished runs as canceled.\n          </DialogBody>\n        ) : (\n          <DialogBody>\n            There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n            yet to be queued or launched.\n          </DialogBody>\n        )}\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      {unfinishedMap && (\n        <TerminationDialog\n          isOpen={\n            !!backfill &&\n            (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n            !!Object.keys(unfinishedMap).length\n          }\n          onClose={onClose}\n          onComplete={onComplete}\n          selectedRuns={unfinishedMap}\n        />\n      )}\n    </>\n  );\n};\n\nexport const BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillTerminationDialogBackfillFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    numCancelable\n  }\n`;\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {\n  BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT,\n  BackfillStepStatusDialog,\n  backfillCanShowStepStatus,\n} from './BackfillStepStatusDialog';\nimport {\n  BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT,\n  BackfillTerminationDialog,\n} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillActionsBackfillFragment} from './types/BackfillActionsMenu.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {showSharedToaster} from '../../app/DomUtils';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\n\nexport function backfillCanCancelSubmission(backfill: {\n  hasCancelPermission: boolean;\n  isAssetBackfill: boolean;\n  status: BulkActionStatus;\n  numCancelable: number;\n}) {\n  return (\n    backfill.hasCancelPermission &&\n    ((backfill.isAssetBackfill && backfill.status === BulkActionStatus.REQUESTED) ||\n      backfill.numCancelable > 0)\n  );\n}\n\nexport function backfillCanResume(backfill: {\n  hasResumePermission: boolean;\n  status: BulkActionStatus;\n  partitionSet: {__typename: 'PartitionSet'} | null;\n}) {\n  return !!(\n    backfill.hasResumePermission &&\n    backfill.status === BulkActionStatus.FAILED &&\n    backfill.partitionSet\n  );\n}\n\nexport function backfillCanCancelRuns(\n  backfill: {hasCancelPermission: boolean},\n  counts: {[runStatus: string]: number} | null,\n) {\n  if (!backfill.hasCancelPermission || !counts) {\n    return false;\n  }\n  const queuedCount = counts[RunStatus.QUEUED] || 0;\n  const startedCount = counts[RunStatus.STARTED] || 0;\n  return queuedCount > 0 || startedCount > 0;\n}\n\nexport const BackfillActionsMenu = ({\n  backfill,\n  canCancelRuns,\n  refetch,\n}: {\n  backfill: BackfillActionsBackfillFragment;\n  canCancelRuns: boolean;\n  refetch: () => void;\n}) => {\n  const history = useHistory();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  const [showTerminateDialog, setShowTerminateDialog] = useState(false);\n  const [showStepStatus, setShowStepStatus] = useState(false);\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const resume = async () => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      await showSharedToaster({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      await showSharedToaster({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  const canCancelSubmission = backfillCanCancelSubmission(backfill);\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"View backfill runs\"\n              icon=\"settings_backup_restore\"\n              onClick={() => history.push(runsUrl)}\n            />\n            <MenuItem\n              disabled={!backfillCanShowStepStatus(backfill)}\n              text=\"View step status\"\n              icon=\"view_list\"\n              onClick={() => {\n                setShowStepStatus(true);\n              }}\n            />\n            <MenuItem\n              disabled={!backfillCanResume(backfill)}\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => resume()}\n            />\n            <MenuItem\n              text={\n                canCancelSubmission ? 'Cancel backfill submission' : 'Terminate unfinished runs'\n              }\n              icon=\"cancel\"\n              intent=\"danger\"\n              disabled={!(canCancelSubmission || canCancelRuns)}\n              onClick={() => setShowTerminateDialog(true)}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n\n      <BackfillStepStatusDialog\n        backfill={showStepStatus ? backfill : undefined}\n        onClose={() => setShowStepStatus(false)}\n      />\n      <BackfillTerminationDialog\n        backfill={showTerminateDialog ? backfill : undefined}\n        onClose={() => setShowTerminateDialog(false)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_ACTIONS_BACKFILL_FRAGMENT = gql`\n  fragment BackfillActionsBackfillFragment on PartitionBackfill {\n    id\n    hasCancelPermission\n    hasResumePermission\n    isAssetBackfill\n    status\n    numCancelable\n\n    ...BackfillStepStatusDialogBackfillFragment\n    ...BackfillTerminationDialogBackfillFragment\n  }\n\n  ${BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT}\n  ${BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT}\n`;\n","import {QueryResult, gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, Icon, Mono, Tag} from '@dagster-io/ui-components';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BackfillActionsMenu, backfillCanCancelRuns} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../../asset-graph/Utils';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../../partitions/PartitionStatus';\nimport {PipelineReference} from '../../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../../runs/AssetTagCollections';\nimport {CreatedByTagCell} from '../../runs/CreatedByTag';\nimport {inProgressStatuses} from '../../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../../runs/RunTimeline';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../../schedules/TimestampDisplay';\nimport {useDelayedRowQuery} from '../../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../../workspace/workspacePath';\n\ninterface BackfillRowProps {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  showBackfillTarget: boolean;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n  refetch: () => void;\n}\n\nexport const BackfillRow = (props: BackfillRowProps) => {\n  const statusUnsupported =\n    props.backfill.numPartitions === null ||\n    props.backfill.partitionNames === null ||\n    props.backfill.isAssetBackfill;\n\n  if (statusUnsupported) {\n    return <BackfillRowContent {...props} counts={null} statuses={null} statusQueryResult={null} />;\n  }\n  return (\n    <BackfillRowLoader backfillId={props.backfill.id} numPartitions={props.backfill.numPartitions}>\n      {(data) => <BackfillRowContent {...props} {...data} />}\n    </BackfillRowLoader>\n  );\n};\n\ninterface LoadResult {\n  counts: {[runStatus: string]: number} | null;\n  statusQueryResult: QueryResult<any, any> | null;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n}\n\nexport const BackfillRowLoader = (props: {\n  backfillId: string;\n  numPartitions: number | null;\n  children: (data: LoadResult) => React.ReactNode;\n}) => {\n  const {backfillId, numPartitions} = props;\n\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions.\n  //\n  const [statusQueryFn, statusQueryResult] =\n    (numPartitions || 0) > BACKFILL_PARTITIONS_COUNTS_THRESHOLD ? statusCounts : statusDetails;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses?.results || null;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  return props.children({counts, statuses, statusQueryResult});\n};\n\nexport const BackfillRowContent = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onShowPartitionsRequested,\n  refetch,\n  counts,\n  statuses,\n  statusQueryResult,\n}: BackfillRowProps & LoadResult) => {\n  const repoAddress = backfill.partitionSet\n    ? buildRepoAddress(\n        backfill.partitionSet.repositoryOrigin.repositoryName,\n        backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const renderBackfillStatus = () =>\n    statusQueryResult?.loading ? (\n      <div style={{color: Colors.textLight()}}>Loading</div>\n    ) : (\n      <BackfillStatusTag backfill={backfill} counts={counts} />\n    );\n\n  const renderRunStatus = () => {\n    if (!backfill.isValidSerialization) {\n      return <p>A partitions definition has changed since this backfill ran.</p>;\n    }\n    if (statusQueryResult?.loading) {\n      return <div style={{color: Colors.textLight()}}>Loading</div>;\n    }\n    return counts ? (\n      <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n    ) : (\n      <div style={{color: Colors.textLight()}}>{'\\u2013'}</div>\n    );\n  };\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} repoAddress={repoAddress} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 160}}>\n        <CreatedByTagCell tags={backfill.tags} repoAddress={repoAddress} />\n      </td>\n      <td style={{width: 140}}>{renderBackfillStatus()}</td>\n      <td>{renderRunStatus()}</td>\n      <td>\n        <BackfillActionsMenu\n          backfill={backfill}\n          canCancelRuns={backfillCanCancelRuns(backfill, counts)}\n          refetch={refetch}\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n  const partitionCounts = Object.entries(counts).reduce(\n    (partitionCounts, [runStatus, count]) => {\n      partitionCounts[runStatus] = (partitionCounts[runStatus] || 0) + count;\n      return partitionCounts;\n    },\n    {} as {[status: string]: number},\n  );\n\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        statuses?.filter((s) => s.partitionName === key)[0]?.runStatus || RunStatus.NOT_STARTED,\n    }),\n    [statuses],\n  );\n\n  return statuses && backfill.partitionNames ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      health={health}\n      splitPartitions\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[RunStatus.SUCCESS] || 0}\n      inProgressCount={partitionCounts[RunStatus.STARTED] || 0}\n      failedCount={partitionCounts[RunStatus.FAILURE] || 0}\n    />\n  );\n};\n\nconst BackfillTarget = ({\n  backfill,\n  repoAddress,\n}: {\n  backfill: BackfillTableFragment;\n  repoAddress: RepoAddress | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.textLight()} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} dialogTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nexport const BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  counts: {[status: string]: number} | null;\n}) => {\n  if (backfill.isAssetBackfill) {\n    return <BackfillStatusTagForPage backfill={backfill} />;\n  }\n\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">Failed</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (backfill.partitionNames === null) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (!counts) {\n        return <div style={{color: Colors.textLight()}}>None</div>;\n      }\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n    case BulkActionStatus.CANCELING:\n      return <Tag>Canceling</Tag>;\n    case BulkActionStatus.CANCELED:\n      return <Tag>Canceled</Tag>;\n  }\n  return <span />;\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Box, Tag} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../../app/types/PythonErrorFragment.types';\nimport {BulkActionStatus} from '../../graphql/types';\n\ntype BackfillState = {\n  status: BulkActionStatus;\n  error: PythonErrorFragment | null;\n};\n\nexport const BackfillStatusTagForPage = ({backfill}: {backfill: BackfillState}) => {\n  const {status, error} = backfill;\n  function errorState(status: string) {\n    return (\n      <Box margin={{bottom: 12}}>\n        <TagButton\n          onClick={() =>\n            error && showCustomAlert({title: 'Error', body: <PythonErrorInfo error={error} />})\n          }\n        >\n          <Tag intent=\"danger\">{status}</Tag>\n        </TagButton>\n      </Box>\n    );\n  }\n\n  switch (status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n\n    case BulkActionStatus.CANCELING:\n      return errorState('Canceling');\n    case BulkActionStatus.CANCELED:\n      return errorState('Canceled');\n    case BulkActionStatus.FAILED:\n      return errorState('Failed');\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    default:\n      return <Tag>{status}</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {Button, Dialog, DialogFooter, FontFamily} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '16px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogContent partitionNames={backfill?.partitionNames || []} />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface DialogContentProps {\n  partitionNames: string[];\n}\n\n// Separate component so that we can delay sorting until render.\nconst DialogContent = (props: DialogContentProps) => {\n  const {partitionNames} = props;\n\n  const sorted = useMemo(() => {\n    return [...(partitionNames || [])].sort((a, b) => COLLATOR.compare(a, b));\n  }, [partitionNames]);\n\n  return (\n    <div style={{height: '340px', overflow: 'hidden'}}>\n      <VirtualizedItemListForDialog\n        items={sorted}\n        renderItem={(partitionName) => (\n          <div key={partitionName}>\n            <TruncatedTextWithFullTextOnHover text={partitionName} />\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Table} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT} from './BackfillActionsMenu';\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [partitionsRequestedBackfill, setPartitionsRequestedBackfill] =\n    useState<BackfillTableFragment>();\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Launched by</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n              refetch={refetch}\n            />\n          ))}\n        </tbody>\n      </Table>\n\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    isValidSerialization\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    tags {\n      key\n      value\n    }\n    error {\n      ...PythonErrorFragment\n    }\n    ...BackfillActionsBackfillFragment\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport memoize from 'lodash/memoize';\nimport {memo, useContext, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nconst timestampFormat = memoize((timezone: string) => {\n  return new Intl.DateTimeFormat(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hourCycle: 'h23',\n    timeZone: timezone === 'Automatic' ? browserTimezone() : timezone,\n    timeZoneName: 'short',\n  });\n});\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n        ? tick.endTimestamp * 1000\n        : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let i = startTickGridX; i <= maxX; i += tickGridDelta) {\n      ticks.push({\n        time: i,\n        x: getX(i, viewport.width, minX, fullRange),\n        showLabel: i % timeTickGridDelta === 0,\n      });\n    }\n    return ticks;\n  }, [maxX, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, timeTickGridDelta]);\n\n  const {\n    timezone: [timezone],\n  } = useContext(TimeContext);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>{timestampFormat(timezone).format(new Date(tick.time))}</Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n            const count =\n              (isAssetDaemonTick ? tick.requestedAssetMaterializationCount : tick.runIds?.length) ??\n              0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          <NowIndicator\n            style={{\n              transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n            }}\n          />\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) => {\n  const status = useMemo(() => {\n    if (tick.status === InstigationTickStatus.FAILURE) {\n      return 'Evaluation failed';\n    }\n    if (tick.status === InstigationTickStatus.STARTED) {\n      return 'Evaluating…';\n    }\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    if (isAssetDaemonTick) {\n      return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n        tick.requestedAssetMaterializationCount,\n        '',\n        's',\n      )} requested`;\n    } else {\n      return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n    }\n  }, [tick]);\n  const startTime = dayjs(1000 * tick.timestamp!);\n  const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n  const elapsedTime = startTime.to(endTime, true);\n  return (\n    <div>\n      <Caption as=\"div\">\n        {status} ({elapsedTime})\n      </Caption>\n      {tick.status === InstigationTickStatus.STARTED ? null : (\n        <Caption color={Colors.textLight()}>Click for details</Caption>\n      )}\n    </div>\n  );\n});\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Caption,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  IconWrapper,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick, truncate} from './util';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: true,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'In progress',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        (queryState as any)[state.toLowerCase()] = String(states[state as keyof typeof states]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          (status as any)[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () =>\n      Object.keys(shownStates)\n        .filter((status) => shownStates[status as keyof typeof shownStates])\n        .map((status) => status as InstigationTickStatus),\n    [shownStates],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'TickHistoryQuery');\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box padding={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                instigationSelector={instigationSelector}\n                index={index}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<number | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => (qs['tickId'] ? Number(qs['tickId']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {\n        instigationSelector,\n        beforeTimestamp,\n        afterTimestamp,\n        statuses,\n        limit: beforeTimestamp ? undefined : 15,\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useBlockTraceOnQueryResult(queryResult, 'TickHistoryQuery');\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? Number(tick.tickId) : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  instigationSelector,\n  index,\n}: {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  index: number;\n}) {\n  const copyToClipboard = useCopyToClipboard();\n  const [showResults, setShowResults] = React.useState(false);\n\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag tick={tick} isStuckStarted={isStuckStarted} />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td style={{width: 120}}>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                {truncate(tick.cursor || '')}\n              </div>\n              <CopyButton\n                onClick={async () => {\n                  copyToClipboard(tick.cursor || '');\n                  await showSharedToaster({\n                    message: <div>Copied value</div>,\n                    intent: 'success',\n                  });\n                }}\n              >\n                <Icon name=\"assignment\" />\n              </CopyButton>\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            <ButtonLink\n              onClick={() => {\n                setShowResults(true);\n              }}\n            >\n              {tick.runIds.length === 1\n                ? '1 run requested'\n                : `${tick.runIds.length} runs requested`}\n            </ButtonLink>\n            {tick.runs.length === 1\n              ? tick.runs.map((run) => (\n                  <React.Fragment key={run.id}>\n                    <RunStatusLink run={run} />\n                  </React.Fragment>\n                ))\n              : null}\n          </Box>\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n          <TickDetailsDialog\n            isOpen={showResults}\n            tickId={Number(tick.tickId)}\n            instigationSelector={instigationSelector}\n            onClose={() => {\n              setShowResults(false);\n            }}\n          />\n        </Box>\n      </td>\n    </tr>\n  );\n}\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.accentGray()};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.accentGrayHover()};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.linkDefault()};\n  }\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import {useReducer} from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => useReducer(reducer, initialState);\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui-components';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList = (props: PartitionRunListProps) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  Popover,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useEffect, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  TopLabelTilted,\n  topLabelHeightForLabels,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixData,\n  MatrixStep,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  PartitionRuns,\n  StatusSquareColor,\n  useMatrixData,\n} from './useMatrixData';\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  Range,\n  partitionStatusAtIndex,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\ninterface PartitionPerAssetStatusProps\n  extends Omit<PartitionStepStatusBaseProps, 'partitionNames'> {\n  assetHealth: PartitionHealthData[];\n  assetQueryItems: GraphQueryItem[];\n  rangeDimensionIdx: number;\n  rangeDimension: PartitionHealthDimension;\n}\n\nexport const PartitionPerAssetStatus = ({\n  assetHealth,\n  rangeDimension,\n  rangeDimensionIdx,\n  assetQueryItems,\n  ...rest\n}: PartitionPerAssetStatusProps) => {\n  const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n  for (const a of assetHealth) {\n    if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n      // Ignore assets in the job / graph that do not have the range partition dimension.\n      continue;\n    }\n    const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n    rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n  }\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n      idx: partitionKeyIdx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: assetPartitionStatusToSquareColor(\n          partitionStatusAtIndex(rangesByAssetKey[box.node.name]!, partitionKeyIdx),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\ninterface PartitionPerOpStatusProps extends PartitionStepStatusBaseProps {\n  repoAddress: RepoAddress;\n  partitions: PartitionRuns[];\n}\n\nexport const PartitionPerOpStatus = ({\n  repoAddress,\n  pipelineName,\n  partitions,\n  partitionNames,\n  ...rest\n}: PartitionPerOpStatusProps) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\ninterface PartitionStepStatusProps extends PartitionStepStatusBaseProps {\n  data: MatrixData;\n  showLatestRun: boolean;\n}\n\nconst PartitionStepStatus = (props: PartitionStepStatusProps) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x, paddingRight: 8}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                <MiddleTruncate text={step.name} />\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.keylineDefault()};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: ${Colors.backgroundDefault()};\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.keylineDefault()};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare = ({\n  step,\n  runs,\n  runsLoaded,\n  hovered,\n  setHovered,\n  setFocused,\n  partitionName,\n}: {\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}) => {\n  const [opened, setOpened] = useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = [...runs].reverse().find((r) => r.status !== RunStatus.CANCELED)?.status;\n    if (runStatus) {\n      squareStatus = runStatus.toLowerCase();\n    } else {\n      squareStatus = 'empty';\n    }\n  }\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1]!, {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: Colors.accentGreen(),\n  SUCCESS_SKIPPED: Colors.accentGreenHover(),\n  FAILURE: Colors.accentRed(),\n  FAILURE_SKIPPED: Colors.accentRedHover(),\n  SKIPPED: Colors.accentYellow(),\n  IN_PROGRESS: Colors.accentBlue(),\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.backgroundDefaultHover()};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.backgroundDefaultHover()};\n        .tilted {\n          background: ${Colors.backgroundLight()};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.textLight()}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.accentBlue()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlue()};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.accentBlueHover()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlueHover()};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.accentBlue()} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: ${Colors.accentGray()};\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(\n          ${Colors.backgroundGray()} 0%,\n          ${Colors.backgroundGray()} 45%,\n          ${Colors.backgroundGrayHover()} 60%\n        );\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n    &.started,\n    &.starting,\n    &.canceling {\n      &:before {\n        background: ${STEP_STATUS_COLORS.IN_PROGRESS};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) =>\n    flatGradientStack([hovered ? Colors.backgroundLight() : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  const maxlength = Math.max(...labels.map((p) => p.length));\n  return (maxlength > 10 ? maxlength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted = ({label, $height}: {label: string; $height: number}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.borderDefault()};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport {useRef} from 'react';\n\nimport {\n  PartitionMatrixSolidHandleFragment,\n  PartitionMatrixStepRunFragment,\n} from './types/useMatrixData.types';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagster 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    (partitionsByName as any)[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1]!;\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx]!;\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii]!.finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii]!.runs.length === 0 ||\n        partitionColumns[ii]!.steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport {useEffect, useRef, useState} from 'react';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQuery,\n  PartitionStepLoaderQueryVariables,\n} from './types/usePartitionStepQuery.types';\nimport {PARTITION_MATRIX_STEP_RUN_FRAGMENT, PartitionRuns} from './useMatrixData';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = useRef(0);\n  const [dataState, setDataState] = useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: ReturnType<typeof setInterval> = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.id === r.id))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]!);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors} from '@dagster-io/ui-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.backgroundDisabled();\n    case 'scheduled':\n      return Colors.backgroundDisabled();\n    case 'inProgress':\n      return Colors.accentBlue();\n    case 'failed':\n      return Colors.accentRed();\n    case 'succeeded':\n      return Colors.accentGreen();\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element!);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  Popover,\n  Spinner,\n  Tag,\n  Tooltip,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {RunBatch, batchRunsForTimeline} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {SECTION_HEADER_HEIGHT} from '../workspace/TableSectionHeader';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; job: TimelineJob};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce(\n    (accum, job) => {\n      const {repoAddress} = job;\n      const repoKey = repoAddressAsURLString(repoAddress);\n      const jobsForRepo = accum[repoKey] || [];\n      return {...accum, [repoKey]: [...jobsForRepo, job]};\n    },\n    {} as Record<string, TimelineJob[]>,\n  );\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.entries(buckets).forEach(([repoKey, bucket]) => {\n      const repoAddress = repoAddressFromPath(repoKey);\n      if (!repoAddress) {\n        return;\n      }\n\n      flat.push({type: 'header', repoAddress, jobCount: bucket.length});\n      if (expandedKeys.includes(repoKey)) {\n        bucket.forEach((job) => {\n          flat.push({type: 'job', repoAddress, job});\n        });\n      }\n    });\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey]!.length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n\n  return (\n    <>\n      <div ref={measureRef} />\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border=\"top-and-bottom\"\n      >\n        Jobs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index]!;\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      jobs={buckets[repoKey]!}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    job={row.job}\n                    key={key}\n                    height={size}\n                    top={start}\n                    range={range}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {expanded, onToggle, onToggleAll, repoAddress, isDuplicateRepoName, jobs, height, top} =\n    props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags jobs={jobs} />}\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.keylineDefault()}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine\n              style={{left: nowLeft, backgroundColor: Colors.accentPrimary(), zIndex: 1}}\n            />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.textLighter()};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset 0 1px 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n\n  :first-child {\n    box-shadow:\n      inset 1px 0 0 ${Colors.keylineDefault()},\n      inset -1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  white-space: nowrap;\n\n  :not(:first-child) {\n    box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.keylineDefault()};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${Colors.accentPrimary()};\n  border-radius: 1px;\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-size: 10px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 4;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $height={height} $start={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.textDefault()}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0]!.id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.backgroundDefault()}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border=\"top-and-bottom\"\n    >\n      {content()}\n    </Box>\n  );\n};\n\ntype RowProps = {$height: number; $start: number};\n\nconst Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.keylineDefault()};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n  transition: background-color 100ms linear;\n\n  :hover {\n    background-color: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 1px;\n  height: ${ROW_HEIGHT - 8}px;\n  position: absolute;\n  top: 4px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition:\n    background 200ms linear,\n    opacity 200ms linear,\n    width 200ms ease-in-out;\n\n  :hover {\n    opacity: 0.7;\n  }\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 12px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border=\"bottom\">\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? 'top' : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border=\"top\">\n          <Link to={`${job.path}/runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n\n  // Give a pixel of breathing room for the \"now\" position.\n  const nowLeft = ((now - start) / (end - start)) * width + 1;\n\n  // Sort all runs by start time (via `left` value), ascending. Then iterate through\n  // them, batching them together.\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => a.left - b.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      scheduleOriginId: scheduleState.id,\n      scheduleSelectorId: scheduleState.selectorId,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      jobOriginId: sensorState.id,\n      jobSelectorId: sensorState.selectorId,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {useMutation} from '@apollo/client';\nimport {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip content={tooltipContent} display=\"flex\">\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] = useState<DryRunInstigationTick | null>(\n    null,\n  );\n\n  const sensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                    ? 'Error'\n                    : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                          ? 'Persisted'\n                          : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {QueryResult} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  FontFamily,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorTargetList} from './SensorTargetList';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from './types/SensorRoot.types';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  selectionQueryResult,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  selectionQueryResult: QueryResult<SensorAssetSelectionQuery, SensorAssetSelectionQueryVariables>;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  const assetSelectionResult = selectionQueryResult.data?.sensorOrError;\n\n  const assetSelectionData =\n    assetSelectionResult?.__typename === 'Sensor' ? assetSelectionResult : null;\n  const selectedAssets = assetSelectionData?.assetSelection;\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{name}</Heading>}\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            {sensor.sensorType === SensorType.STANDARD ? (\n              <Button\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test Sensor\n              </Button>\n            ) : null}\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || selectedAssets ? (\n            <tr>\n              <td>Target</td>\n              <td>\n                <SensorTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  selectionQueryResult={selectionQueryResult}\n                  sensorType={sensor.sensorType}\n                />\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? cursor : 'None'}\n                  </span>\n                  <Button icon={<Icon name=\"edit\" />} onClick={() => setCursorEditing(true)}>\n                    Edit\n                  </Button>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    jobOriginId\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {ASSET_DAEMON_TICK_FRAGMENT} from '../assets/auto-materialization/AssetDaemonTicksQuery';\n\nexport const ASSET_SENSOR_TICKS_QUERY = gql`\n  query AssetSensorTicksQuery(\n    $sensorSelector: SensorSelector!\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          ticks(\n            dayRange: $dayRange\n            dayOffset: $dayOffset\n            statuses: $statuses\n            limit: $limit\n            cursor: $cursor\n            beforeTimestamp: $beforeTimestamp\n            afterTimestamp: $afterTimestamp\n          ) {\n            id\n            ...AssetDaemonTickFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${ASSET_DAEMON_TICK_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {ASSET_SENSOR_TICKS_QUERY} from '../../sensors/AssetSensorTicksQuery';\nimport {\n  AssetSensorTicksQuery,\n  AssetSensorTicksQueryVariables,\n} from '../../sensors/types/AssetSensorTicksQuery.types';\nimport {SensorFragment} from '../../sensors/types/SensorFragment.types';\nimport {RepoAddress} from '../../workspace/types';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const SensorAutomaterializationEvaluationHistoryTable = ({\n  repoAddress,\n  sensor,\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetSensorTicksQuery,\n    AssetSensorTicksQueryVariables\n  >({\n    query: ASSET_SENSOR_TICKS_QUERY,\n    variables: {\n      sensorSelector: {\n        sensorName: sensor.name,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      if (data?.sensorOrError.__typename === 'Sensor') {\n        const ticks = data.sensorOrError.sensorState.ticks;\n        if (ticks.length) {\n          return ticks[PAGE_SIZE - 1]?.id;\n        }\n      }\n      return undefined;\n    },\n    getResultArray: (data) => {\n      if (data?.sensorOrError.__typename === 'Sensor') {\n        return data.sensorOrError.sensorState.ticks;\n      }\n      return [];\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  useBlockTraceOnQueryResult(queryResult, 'AssetSensorTicksQuery');\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  const allTicks =\n    queryResult.data?.sensorOrError?.__typename === 'Sensor'\n      ? queryResult.data.sensorOrError.sensorState.ticks\n      : null;\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (allTicks && allTicks.length) {\n        const start = allTicks[allTicks.length - 1]?.timestamp;\n        const end = allTicks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [allTicks, paginationProps.hasPrevCursor, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={allTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {Alert, Box, Colors, Spinner, Subtitle2} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_SENSOR_TICKS_QUERY} from './AssetSensorTicksQuery';\nimport {DaemonStatusForWarning, SensorInfo} from './SensorInfo';\nimport {\n  AssetSensorTicksQuery,\n  AssetSensorTicksQueryVariables,\n} from './types/AssetSensorTicksQuery.types';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {useRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomaterializationTickDetailDialog} from '../assets/auto-materialization/AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from '../assets/auto-materialization/AutomaterializeRunHistoryTable';\nimport {SensorAutomaterializationEvaluationHistoryTable} from '../assets/auto-materialization/SensorAutomaterializationEvaluationHistoryTable';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../instigation/util';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n  loading: boolean;\n  daemonStatus: DaemonStatusForWarning;\n}\n\nexport const SensorPageAutomaterialize = (props: Props) => {\n  const {repoAddress, sensor, loading, daemonStatus} = props;\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n\n  const getVariables = useCallback(\n    (currentTime = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          sensorSelector: {\n            sensorName: sensor.name,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          },\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        sensorSelector: {\n          sensorName: sensor.name,\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n        },\n        afterTimestamp: (currentTime - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [sensor, repoAddress, statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetSensorTicksQuery, AssetSensorTicksQueryVariables>(\n    ASSET_SENSOR_TICKS_QUERY,\n  );\n  useBlockTraceOnQueryResult(queryResult, 'AssetSensorTicksQuery');\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    if (data?.sensorOrError.__typename === 'Sensor') {\n      return data.sensorOrError.sensorState.ticks;\n    }\n    return [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  const runTableFilterTags = useMemo(() => {\n    return [\n      {\n        key: DagsterTag.RepositoryLabelTag,\n        value: repoAddressAsTag(repoAddress),\n      },\n      {key: DagsterTag.SensorName, value: sensor.name},\n    ];\n  }, [repoAddress, sensor]);\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <SensorInfo assetDaemonHealth={daemonStatus} padding={{vertical: 16, horizontal: 24}} />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!sensor && loading ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <SensorAutomaterializationEvaluationHistoryTable\n              repoAddress={repoAddress}\n              sensor={sensor}\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable\n              filterTags={runTableFilterTags}\n              setTableView={setTableView}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {CursorHistoryControls} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  highlightedIds,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PreviousRunsForSensorQuery,\n    PreviousRunsForSensorQueryVariables\n  >({\n    query: PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    variables: {\n      filter: {\n        tags: [\n          {key: DagsterTag.SensorName, value: sensor.name},\n          {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n        ],\n      },\n    },\n    nextCursorForResult: (data) => {\n      if (data.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return data.pipelineRunsOrError.results[RUNS_LIMIT - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (data?.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    pageSize: RUNS_LIMIT,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'PreviousRunsForSensorQuery');\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, !paginationProps.hasPrevCursor ? 10000 : 60 * 60 * 1000);\n\n  let data = queryResult.data;\n\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    // Use previous data to stop the screen from flashing while we wait for the next data to load\n    data = queryResult.previousData;\n  }\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data.pipelineRunsOrError.results;\n  return (\n    <>\n      <RunTable\n        actionBarComponents={tabs}\n        runs={runs}\n        highlightedIds={highlightedIds}\n        hideCreatedBy={true}\n      />\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPageAutomaterialize} from './SensorPageAutomaterialize';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'SensorRootQuery');\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n  useBlockTraceOnQueryResult(selectionQueryResult, 'SensorAssetSelectionQuery');\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n\n  if (sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE) {\n    const assetDaemonStatus = instance.daemonHealth.ampDaemonStatus;\n    return (\n      <Page>\n        <SensorDetails\n          repoAddress={repoAddress}\n          sensor={sensorOrError}\n          daemonHealth={assetDaemonStatus.healthy}\n          refreshState={refreshState}\n          selectionQueryResult={selectionQueryResult}\n        />\n        <SensorPageAutomaterialize\n          repoAddress={repoAddress}\n          sensor={sensorOrError}\n          daemonStatus={assetDaemonStatus}\n          loading={loading}\n        />\n      </Page>\n    );\n  }\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        selectionQueryResult={selectionQueryResult}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} {...variables} />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...SensorAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment SensorAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          key {\n            path\n          }\n          definition {\n            id\n            autoMaterializePolicy {\n              __typename\n            }\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Icon} from './Icon';\nimport {UnstyledButton} from './UnstyledButton';\n\ntype Props = {\n  isOpen: boolean;\n  onToggle: (e: React.MouseEvent<HTMLButtonElement>) => void;\n};\nexport const DisclosureTriangleButton = ({isOpen, onToggle}: Props) => {\n  return (\n    <UnstyledButton\n      onClick={(e) => {\n        onToggle(e);\n      }}\n      style={{cursor: 'pointer', width: 18}}\n    >\n      <Icon\n        name=\"arrow_drop_down\"\n        style={{transform: isOpen ? 'rotate(0deg)' : 'rotate(-90deg)'}}\n      />\n    </UnstyledButton>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogFooter,\n  DisclosureTriangleButton,\n  MiddleTruncate,\n  Subtitle2,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  SensorAssetSelectionFragment,\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from './types/SensorRoot.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../ui/formatters';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorTargetList = ({\n  sensorType,\n  targets,\n  selectionQueryResult,\n  repoAddress,\n}: {\n  sensorType: SensorType;\n  targets: {pipelineName: string}[] | null | undefined;\n  repoAddress: RepoAddress;\n  selectionQueryResult: QueryResult<SensorAssetSelectionQuery, SensorAssetSelectionQueryVariables>;\n}) => {\n  const repo = useRepository(repoAddress);\n  const assetSelectionResult = selectionQueryResult.data?.sensorOrError;\n  const assetSelectionData =\n    assetSelectionResult?.__typename === 'Sensor' ? assetSelectionResult : null;\n\n  if (!targets && !assetSelectionData) {\n    return <span />;\n  }\n\n  const selectedAssets = assetSelectionData?.assetSelection;\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {selectedAssets && (\n        <AssetSelectionLink assetSelection={selectedAssets} sensorType={sensorType} />\n      )}\n      {visibleTargets?.map((target) =>\n        target.pipelineName ? (\n          <PipelineReference\n            key={target.pipelineName}\n            pipelineName={target.pipelineName}\n            pipelineHrefContext={repoAddress}\n            isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n          />\n        ) : null,\n      )}\n    </Box>\n  );\n};\n\nconst AssetSelectionLink = ({\n  assetSelection,\n  sensorType,\n}: {\n  assetSelection: SensorAssetSelectionFragment;\n  sensorType: SensorType;\n}) => {\n  const [showAssetSelection, setShowAssetSelection] = React.useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const sortedAssets = React.useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return [];\n    }\n    return assetSelection.assetsOrError.nodes\n      .slice()\n      .sort((a, b) =>\n        COMMON_COLLATOR.compare(displayNameForAssetKey(a.key), displayNameForAssetKey(b.key)),\n      );\n  }, [assetSelection.assetsOrError]);\n\n  const assetsWithAMP = React.useMemo(\n    () => sortedAssets.filter((asset) => !!asset.definition?.autoMaterializePolicy),\n    [sortedAssets],\n  );\n  const assetsWithoutAMP = React.useMemo(\n    () => sortedAssets.filter((asset) => !asset.definition?.autoMaterializePolicy),\n    [sortedAssets],\n  );\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n\n  return (\n    <>\n      <Dialog\n        isOpen={showAssetSelection}\n        title=\"Targeted assets\"\n        onClose={() => setShowAssetSelection(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px', transform: 'scale(1)'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box flex={{direction: 'column'}}>\n          {sensorType === SensorType.AUTO_MATERIALIZE ? (\n            <>\n              <Section\n                title=\"Assets with a materialization policy\"\n                titleBorder=\"bottom\"\n                assets={assetsWithAMP}\n              />\n              <Section\n                title=\"Assets without a materialization policy\"\n                titleBorder=\"top-and-bottom\"\n                assets={assetsWithoutAMP}\n              />\n            </>\n          ) : (\n            <Section assets={sortedAssets} />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowAssetSelection(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <ButtonLink\n        onClick={() => {\n          if (error) {\n            showCustomAlert({\n              title: 'Python Error',\n              body: <PythonErrorInfo error={error} />,\n            });\n          } else {\n            setShowAssetSelection(true);\n          }\n        }}\n      >\n        {error ? (\n          <>Error loading asset selection</>\n        ) : (\n          <>\n            {assetSelectionString.slice(0, 1).toUpperCase()}\n            {assetSelectionString.slice(1)}\n          </>\n        )}\n      </ButtonLink>\n    </>\n  );\n};\n\nconst Section = ({\n  assets,\n  title,\n  titleBorder = 'top-and-bottom',\n}: {\n  assets: Extract<\n    SensorAssetSelectionFragment['assetsOrError'],\n    {__typename: 'AssetConnection'}\n  >['nodes'];\n  title?: string;\n  titleBorder?: React.ComponentProps<typeof Box>['border'];\n}) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  return (\n    <>\n      {title ? (\n        <Box border={titleBorder} padding={{right: 24, vertical: 12}}>\n          <Box\n            flex={{direction: 'row', gap: 4}}\n            style={{cursor: 'pointer'}}\n            onClick={() => {\n              setIsOpen(!isOpen);\n            }}\n          >\n            <DisclosureTriangleButton onToggle={() => {}} isOpen={isOpen} />\n            <Subtitle2>\n              {title} ({numberFormatter.format(assets.length)})\n            </Subtitle2>\n          </Box>\n        </Box>\n      ) : null}\n      {isOpen ? (\n        assets.length ? (\n          <div style={{maxHeight: '300px', overflowY: 'scroll'}}>\n            <VirtualizedItemListForDialog\n              padding={0}\n              items={assets}\n              renderItem={(asset) => <VirtualizedSelectedAssetRow asset={asset} key={asset.id} />}\n              itemBorders\n            />\n          </div>\n        ) : (\n          <Box padding={{horizontal: 24, vertical: 12}}>\n            <Caption color={Colors.textLight()}>0 assets</Caption>\n          </Box>\n        )\n      ) : null}\n    </>\n  );\n};\n\nconst VirtualizedSelectedAssetRow = ({\n  asset,\n}: {\n  asset: Extract<\n    SensorAssetSelectionFragment['assetsOrError'],\n    {__typename: 'AssetConnection'}\n  >['nodes'][0];\n}) => {\n  return (\n    <Box\n      flex={{alignItems: 'center', gap: 4}}\n      style={{cursor: 'pointer'}}\n      padding={{horizontal: 24}}\n    >\n      <Link to={assetDetailsPathForKey(asset.key)} target=\"_blank\">\n        <Box style={{overflow: 'hidden'}}>\n          <MiddleTruncate text={displayNameForAssetKey(asset.key)} />\n        </Box>\n      </Link>\n    </Box>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n","import {Box, Colors, Icon, Table, Tag} from '@dagster-io/ui-components';\nimport qs from 'qs';\n\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>{`${key}: ${value}`}</Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <AnchorButton\n                icon={<Icon name=\"edit\" />}\n                target=\"_blank\"\n                to={workspacePathFromAddress(\n                  repoAddress,\n                  `/pipeline_or_job/${request.jobName ?? jobName}/playground/setup?${qs.stringify({\n                    mode,\n                    config: request.runConfigYaml,\n                    tags: request.tags,\n                    assetSelection: request.assetSelection?.map(({path}) => ({\n                      assetKey: {path},\n                    })),\n                  })}`,\n                )}\n              >\n                Open in Launchpad\n              </AnchorButton>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n","import {gql} from '@apollo/client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport const TickStatusTag = ({\n  tick,\n  isStuckStarted,\n}: {\n  tick:\n    | Pick<AssetDaemonTickFragment, 'status' | 'error' | 'requestedAssetMaterializationCount'>\n    | Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  isStuckStarted?: boolean;\n}) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    const requestedItem = isAssetDaemonTick ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={isAssetDaemonTick ? '0 materializations requested' : '0 runs requested'}\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count = isAssetDaemonTick\n          ? tick.requestedAssetMaterializationCount\n          : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import {Checkbox, Tooltip} from '@dagster-io/ui-components';\n\ninterface Props {\n  checkedCount: number;\n  totalCount: number;\n  onToggleAll: (checked: boolean) => void;\n}\n\nexport const CheckAllBox = ({checkedCount, totalCount, onToggleAll}: Props) => {\n  return (\n    <Tooltip content={`${checkedCount} of ${totalCount} selected`} placement=\"top\">\n      <Checkbox\n        indeterminate={checkedCount > 0 && checkedCount !== totalCount}\n        checked={checkedCount > 0 && checkedCount === totalCount}\n        onChange={(e) => {\n          if (e.target instanceof HTMLInputElement) {\n            onToggleAll(checkedCount !== totalCount);\n          }\n        }}\n      />\n    </Tooltip>\n  );\n};\n","import {useStaticSetFilter} from './useStaticSetFilter';\nimport {InstigationStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\n\nexport const useInstigationStatusFilter = () => {\n  const [state, onStateChanged] = useQueryPersistedState<Set<InstigationStatus>>({\n    encode: (vals) => ({instigationStatus: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.instigationStatus?.split(',') as InstigationStatus[]) || []),\n  });\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    state,\n    onStateChanged,\n    getStringValue: (value) => value,\n  });\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (_key: string | RepoAddress) => {\n      const key = typeof _key === 'object' ? repoAddressAsHumanString(_key) : _key;\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp4-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT, ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS = '1fr 1fr 76px 148px 210px 92px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.textDefault(),\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.textLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp4-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  IconName,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SENSOR_SWITCH_FRAGMENT, SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorTargetList} from '../sensors/SensorTargetList';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 150px 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  const [querySensor, sensorQueryResult] = useLazyQuery<\n    SingleSensorQuery,\n    SingleSensorQueryVariables\n  >(SINGLE_SENSOR_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n  });\n\n  const [querySensorAssetSelection, sensorAssetSelectionQueryResult] = useLazyQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      sensorSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n  });\n\n  useDelayedRowQuery(\n    React.useCallback(() => {\n      querySensor();\n      querySensorAssetSelection();\n    }, [querySensor, querySensorAssetSelection]),\n  );\n\n  useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = sensorQueryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  const sensorType = sensorData?.sensorType;\n  const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <div>\n            {sensorInfo ? (\n              sensorInfo.description ? (\n                <Tooltip content={sensorInfo.description}>\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                </Tooltip>\n              ) : (\n                <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n              )\n            ) : null}\n          </div>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData ? (\n              <SensorTargetList\n                targets={sensorData.targets}\n                repoAddress={repoAddress}\n                selectionQueryResult={sensorAssetSelectionQueryResult}\n                sensorType={sensorData.sensorType}\n              />\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.textDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SENSOR_TYPE_META: Record<\n  SensorType,\n  {name: string; icon: IconName; description: string | null}\n> = {\n  [SensorType.ASSET]: {\n    name: 'Asset',\n    icon: 'asset',\n    description: 'Asset sensors instigate runs when a materialization occurs',\n  },\n  [SensorType.AUTO_MATERIALIZE]: {\n    name: 'Auto-materialize',\n    icon: 'materialization',\n    description:\n      'Auto-materialize sensors trigger runs based on auto-materialize policies defined on assets.',\n  },\n  [SensorType.FRESHNESS_POLICY]: {\n    name: 'Freshness policy',\n    icon: 'hourglass',\n    description:\n      'Freshness sensors check the freshness of assets on each tick, then perform an action in response to that status',\n  },\n  [SensorType.MULTI_ASSET]: {\n    name: 'Multi-asset',\n    icon: 'multi_asset',\n    description:\n      'Multi asset sensors trigger job executions based on multiple asset materialization event streams',\n  },\n  [SensorType.RUN_STATUS]: {\n    name: 'Run status',\n    icon: 'alternate_email',\n    description: 'Run status sensors react to run status',\n  },\n  [SensorType.STANDARD]: {\n    name: 'Standard',\n    icon: 'sensors',\n    description: null,\n  },\n  [SensorType.UNKNOWN]: {\n    name: 'Standard',\n    icon: 'sensors',\n    description: null,\n  },\n};\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["ASSET_DAEMON_TICK_FRAGMENT","gql","PYTHON_ERROR_FRAGMENT","ASSET_DAEMON_TICKS_QUERY","_obj","AutomaterializationEvaluationHistoryTable","param","loading","ticks","statuses","setStatuses","setSelectedTick","setTableView","paginationProps","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","Box","flex","justifyContent","alignItems","padding","vertical","horizontal","margin","top","border","direction","gap","jsx","ButtonGroup","activeItems","Set","buttons","id","label","onClick","length","Spinner","purpose","StatusCheckbox","status","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","TableWrapper","thead","tr","th","style","width","tbody","map","tick","index","isTickStuckInStartedState","hasPrevCursor","td","Timestamp","timestamp","unix","timeFormat","showTimezone","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","endTimestamp","includes","ButtonLink","Body2","requestedAssetMaterializationCount","div","paddingBottom","CursorHistoryControls","StatusLabels","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_13__","_","Checkbox","checked","has","onChange","newStatuses","delete","add","styled","Table","TEMPLATE_COLUMNS","AutomaterializationTickDetailDialog","memo","isOpen","close","useState","queryString","setQueryString","filteredAssetKeys","useMemo","requestedAssetKeys","filter","assetKey","path","join","count","parentRef","useRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","content","AssetKeysDialogEmptyState","title","description","Fragment","strong","overflow","ref","HeaderRow","templateColumns","sticky","HeaderCell","Inner","$totalHeight","key","size","start","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","Caption","color","Colors","AssetKeysDialog","setIsOpen","height","header","AssetKeysDialogHeader","showSearch","placeholder","display","gridTemplateRows","TickDetailSummary","undefined","Subtitle2","numMaterializations","queryResult","useQuery","ASSET_GROUP_QUERY","fetchPolicy","variables","data","useBlockTraceOnQueryResult","asset","assetOrError","__typename","definition","repoAddress","buildRepoAddress","repository","name","location","Row","RowGrid","RowCell","AssetLink","icon","textStyle","groupName","Link","to","workspacePathFromAddress","concat","Icon","assetDetailsPathForKey","view","evaluation","AutomaterializeRunHistoryTable","filterTags","useCursorPaginatedQuery","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","getResultArray","tags","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_7__","value","query","RUNS_ROOT_QUERY","pageSize","useQueryRefreshAtInterval","runData","previousData","_this","Wrapper","RunTable","withConfig","backfillCanShowStepStatus","backfill","partitionSet","partitionNames","BackfillStepStatusDialog","onClose","jsx_runtime","Dialog","repositoryOrigin","repositoryName","repositoryLocationName","BackfillStepStatusDialogContent","DialogFooter","topBorder","Button","BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT","setPageSize","offset","setOffset","runsFilter","token","partitions","usePartitionStepQuery","partitionSetName","partitionTagName","DagsterTag","Partition","repositorySelector","repoAddressToSelector","jobName","pipelineName","skipQuery","PartitionPerOpStatus","BackfillTerminationDialog","onComplete","cancelBackfill","useMutation","CANCEL_BACKFILL_MUTATION","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","backfillId","notifyOnNetworkStatusChange","skip","isSubmitting","setIsSubmitting","unfinishedMap","partitionBackfillOrError","unfinishedPartitions","partitionStatuses","partition","runStatus","runId","cancelableStatuses","reduce","accum","_object_spread_props","_object_spread","_define_property","numUnscheduled","numCancelable","cancel","_async_to_generator","_state","sent","BulkActionStatus","CANCELED","isAssetBackfill","DialogBody","intent","disabled","TerminationDialog","Object","keys","selectedRuns","BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT","backfillCanCancelRuns","counts","hasCancelPermission","queuedCount","RunStatus","QUEUED","startedCount","BackfillActionsMenu","canCancelRuns","refetch","history","useHistory","runsUrl","runsPathWithFilters","showTerminateDialog","setShowTerminateDialog","showStepStatus","setShowStepStatus","resumeBackfill","RESUME_BACKFILL_MUTATION","resume","error","resumePartitionBackfill","showSharedToaster","message","Group","spacing","action","text","showCustomAlert","body","PythonErrorInfo","canCancelSubmission","REQUESTED","Popover","position","Menu","MenuItem","push","hasResumePermission","FAILED","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","BackfillRow","props","numPartitions","BackfillRowContent","statusQueryResult","BackfillRowLoader","statusDetails","useLazyQuery","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","_ref","_swc_helpers_sliced_to_array__WEBPACK_IMPORTED_MODULE_27__","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","statusQueryFn","useDelayedRowQuery","FIFTEEN_SECONDS","React","fromEntries","partitionStatusCounts","e","countBy","k","children","allPartitions","showBackfillTarget","onShowPartitionsRequested","Mono","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","CreatedByTagCell","BackfillStatusTag","isValidSerialization","BackfillRunStatus","p","partitionCounts","entries","health","runStatusForPartitionKey","s","partitionName","NOT_STARTED","PartitionStatus","splitPartitions","entry","find","r","RunStatusTagsWithCounts","succeededCount","inProgressCount","failedCount","repo","useRepository","assetSelection","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","fontWeight","workspacePipelinePath","repoName","repoLocation","isJob","isThisThingAJob","encodeURIComponent","span","fontSize","repoAddressAsHumanString","AssetKeyTagCollection","assetKeys","dialogTitle","PipelineReference","showIcon","pipelineHrefContext","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","small","hideStatusTooltip","BackfillStatusTagForPage","bottom","COMPLETED","Array","from","inProgressStatuses","some","CANCELING","button","errorState","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","BackfillPartitionsRequestedDialog","fontFamily","FontFamily","monospace","DialogContent","sorted","_to_consumable_array","sort","a","b","compare","VirtualizedItemListForDialog","renderItem","TruncatedTextWithFullTextOnHover","BackfillTable","_param_showBackfillTarget","backfills","partitionsRequestedBackfill","setPartitionsRequestedBackfill","BACKFILL_TABLE_FRAGMENT","_obj1","dayjs","relativeTime","COLOR_MAP","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__","HoverColorMap","timestampFormat","memoize","timezone","DateTimeFormat","hour","minute","second","hourCycle","timeZone","browserTimezone","timeZoneName","LiveTickTimeline","onHoverTick","onSelectTick","exactRange","timeRange","_param_tickGrid","tickGrid","MINUTE","timeAfter","Date","now","setNow","isPaused","setPaused","useEffect","interval","setInterval","clearInterval","maxX","minX","_param_timeRange","fullRange","useViewport","viewport","containerProps","ticksReversed","reverse","ticksToDisplay","i","startX","viewportWidth","endX","isStuckStartedTick","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_14__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_15__","Math","max","timeTickGridDelta","tickGridDelta","startTickGridX","ceil","gridTicks","time","x","showLabel","useContext","TimeContext","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","format","isAssetDaemonTick","runIds","Tick","onMouseEnter","onMouseLeave","Tooltip","TickTooltip","NowIndicator","TimeAxisWrapper","ifPlural","startTime","endTime","elapsedTime","as","Chart","register","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_25__","STATUS_TEXT_MAP","TicksTable","tabs","setTimerange","setParentStatuses","useQueryPersistedState","encode","states","queryState","state","toLowerCase","String","decode","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_27__","shownStates","setShownStates","instigationSelector","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_28__","instigationStateOrError","JOB_TICK_HISTORY_QUERY","end","reset","logTick","setLogTick","NonIdealState","instigationType","StatusFilter","target","TickLogDialog","InstigationType","SENSOR","TickRow","marginTop","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","tickId","qs","Number","selectedTickId","setSelectedTickId","pollingPaused","pausePolling","limit","Subheading","_data_instigationStateOrError_ticks","onTickClick","TickDetailsDialog","copyToClipboard","useCopyToClipboard","showResults","setShowResults","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","addedPartitions","deletedPartitions","showSeconds","cursor","truncate","CopyButton","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_37__","run","RunStatusLink","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","IconWrapper","filterPermissionedInstigationState","instigationState","hasStartPermission","InstigationStatus","STOPPED","hasStopPermission","RUNNING","instigationStateSummary","instigationStates","anyOff","anyOn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","err","return","initialState","step","completion","completed","errors","reducer","prevState","type","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_1__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_2__","completion1","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_3__","useInstigationStateReducer","useReducer","str","slice","TRUNCATION_THRESHOLD","THREE_DAYS","sum","request","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","RUN_TABLE_RUN_FRAGMENT","getVisibleItemCount","BOX_SIZE","timeboundsOfPartitions","partitionColumns","minUnix","maxUnix","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","steps","Symbol","iterator","min","PartitionPerAssetStatus","_param","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","rangesByAssetKey","dimensions","ranges","rangesForSingleDimension","layoutBoxesWithRangeDimension","layout","buildLayout","nodes","mode","GanttChartMode","FLAT","boxes","node","stepRows","box","totalFailurePercent","finalFailurePercent","partitionKey","partitionKeyIdx","idx","runsLoaded","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","AssetPartitionStatus","MATERIALIZED","MISSING","pipeline","pipelineSelector","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","stepRow","visibleCount","visibleStart","visibleEnd","visibleColumns","topLabelHeight","topLabelHeightForLabels","PartitionRunMatrixContainer","autoFocus","GridFloatingContainer","floating","GridColumn","flexShrink","TopLabel","LeftLabel","paddingLeft","Divider","paddingRight","data-tooltip","stepName","MiddleTruncate","PagerControl","$direction","right","zIndex","TopLabelTilted","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","left","opened","setOpened","squareStatus","_reverse_find","className","data-tooltip-style","interactionKind","placement","onOpening","onClosed","MenuLink","linkToRunEvent","stepKey","STEP_STATUS_COLORS","SUCCESS_SKIPPED","FAILURE_SKIPPED","IN_PROGRESS","flatGradient","multiselectFocused","TopLabelTiltedInner","colors","labels","maxlength","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_4__","GRID_FLOATING_CONTAINER_WIDTH","MISSING_STEP_STATUSES","StepEventStatus","getStartTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","match","inputs","cachedMatrixData","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","buildMatrixData","options","partitionsByName","blankState","lastRun","lastRunStepStatus","stepStats","stats","previousRunStatus","currRun","currRunStatus","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_6__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_7__","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","ii","splice","every","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","byName","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_8__","split","RepositoryLabelTag","v","runTags","parse","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_9__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_10__","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_11__","stopIdx","parallelQueries","timer","_$_to_consumable_array","nextCursorIdx","fetched","Promise","sliceNames","partitionSetTag","PartitionSet","partitionTag","fetchRunsForFilter","apply","recent","pending","relevant","t","updated","o","PARTITION_STEP_LOADER_QUERY","statusToColor","mergeStatusToBackground","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","failedStatuses","successStatuses","statusArr","runCount","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","RunTimeline","_props_loading","jobs","range","buckets","job","repoKey","repoAddressAsURLString","jobsForRepo","allKeys","useRepoExpansionState","expandedKeys","onToggle","onToggleAll","flattened","flat","bucket","repoAddressFromPath","jobCount","DATE_TIME_HEIGHT","measureRef","repoOrder","localeCompare","expandedJobCount","expandedRepos","SECTION_HEADER_HEIGHT","ROW_HEIGHT","duplicateRepoNames","findDuplicateRepoNames","anyJobs","TIME_HEADER_HEIGHT","TimeDividers","Container","row","TimelineHeaderRow","expanded","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","includesTicks","RepoRow","showLocation","rightElement","RunStatusTags","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeOnlyOptions","formatDateTime","useFormatDateTime","dateMarkers","totalTime","startDateStringWithTimezone","dayBoundaries","valueOf","dayStart","getTime","dayEnd","setDate","getDate","date","startLeftMsec","dayLength","toString","endRight","timeMarkers","startGap","firstMarker","markerCount","replace","marker","nowLeft","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","containerWidth","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","JobName","jobType","RunChunks","batch","RunChunk","$background","$multiple","RunHoverContent","BatchCount","background","AnchorButton","attrs","sliced","remaining","HoverContentJobName","maxHeight","overflowY","RunStatusDot","overlap","config","rangeLength","batches","floor","consolidated","shift","canBatch","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_0__","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","ScheduleStateChangeDialog","openWithIntent","schedules","dispatch","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","schedule","scheduleName","scheduleSelector","stop","scheduleState","scheduleOriginId","scheduleSelectorId","selectorId","stopRunningSchedule","mutate","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","progressContent","ProgressBar","animate","NavigationBlock","completionContent","errorCount","successCount","ul","li","ScheduleBulkActionMenu","onDone","setOpenWithIntent","aria-disabled","rightIcon","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Alert","href","makeScheduleKey","SensorStateChangeDialog","sensors","startSensor","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","sensor","sensorName","sensorSelector","sensorState","jobOriginId","jobSelectorId","SensorBulkActionMenu","SensorMonitoredAssets","metadata","SensorResetButton","_usePermissionsForLocation_permissions","usePermissionsForLocation","permissions","canStartSensor","canStopSensor","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","resetSensor","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","toggleOnInFlight","DynamicPartitionRequests","includeTitle","rows","partitionsDefName","def","grow","_param_includeTitle","borderRight","SensorDryRunDialog","SensorDryRun","sensorExecutionData","currentCursor","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursor","submitting","setSubmitting","setError","setSensorExecutionData","submitTest","useCallback","selectorData","evaluationResult","assertUnreachable","data-testid","testId","cursorState","setCursorState","setCursorMutation","SET_CURSOR_MUTATION","onPersistCursorValue","setSensorCursor","underline","runRequests","numRunRequests","didSkip","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","pre","skipReason","RunRequestTable","TextInput","minHeight","RUN_REQUEST_FRAGMENT","TIME_FORMAT","humanizeSensorInterval","minIntervalSeconds","SensorDetails","selectionQueryResult","refreshState","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","running","assetSelectionResult","sensorOrError","assetSelectionData","selectedAssets","PageHeader","Heading","RepositoryLink","QueryRefreshCountdown","sensorType","SensorType","STANDARD","targets","MetadataTableWIP","nextTick","SensorTargetList","SensorSwitch","canReset","AUTO_MATERIALIZE","EditCursorDialog","SensorInfo","sensorDaemonStatus","assetDaemonStatus","warnForSensor","warnForAssets","rel","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","ASSET_SENSOR_TICKS_QUERY","SensorAutomaterializationEvaluationHistoryTable","queryKey","raw","allTicks","SensorPageAutomaterialize","daemonStatus","setIsPaused","getVariables","currentTime","TWENTY_MINUTES","fetch","refresh","useRefreshAtInterval","enabled","intervalMs","leading","selectedTick","tableView","copy","runTableFilterTags","repoAddressAsTag","SensorName","assetDaemonHealth","SensorPreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SENSOR_QUERY","RUNS_LIMIT","actionBarComponents","hideCreatedBy","SensorRoot","useTrackPageView","useParams","useDocumentTitle","selectedTab","setSelectedTab","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","useMergedRefresh","Redirect","instance","ampDaemonStatus","Page","INSTANCE_HEALTH_FRAGMENT","DisclosureTriangleButton","UnstyledButton","visibleTargets","AssetSelectionLink","showAssetSelection","setShowAssetSelection","assetsOrError","sortedAssets","COMMON_COLLATOR","displayNameForAssetKey","assetsWithAMP","autoMaterializePolicy","assetsWithoutAMP","assetSelectionString","maxWidth","minWidth","Section","titleBorder","assets","toUpperCase","_param_titleBorder","numberFormatter","VirtualizedSelectedAssetRow","itemBorders","makeSensorKey","runKey","wrap","runConfigYaml","tableLayout","showErrors","setShowErrors","tag","BaseTag","fillColor","runKeys","targetTagName","successTag","CheckAllBox","checkedCount","totalCount","indeterminate","HTMLInputElement","useInstigationStatusFilter","vals","instigationStatus","onStateChanged","useStaticSetFilter","allValues","getKey","renderLabel","getStringValue","repoNames","uniques","duplicates","validateExpandedKeys","parsed","isArray","collapsedKey","basePath","collapsedStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","_key","nextCollapsedKeys","expand","collapsedSet","errorDisplay","runningScheduleCount","popoverClassName","fill","TEMPLATE_COLUMNS_WITH_CHECKBOX","VirtualizedScheduleRow","onToggleChecked","showCheckboxColumn","SINGLE_SCHEDULE_QUERY","selector","querySchedule","scheduleData","scheduleOrError","cronString","humanCronString","cronSchedule","executionTimezone","checkboxState","$showCheckboxColumn","canShow","shiftKey","nativeEvent","MouseEvent","getModifierState","ScheduleStringContainer","whiteSpace","textOverflow","LoadingOrNone","ScheduleSwitch","runningCount","LastRunSummary","showButton","showHover","showSummary","VirtualizedScheduleHeader","checkbox","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorQueryResult","querySensorAssetSelection","sensorAssetSelectionQueryResult","sensorData","sensorInfo","SENSOR_TYPE_META","VirtualizedSensorHeader","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_27__","ASSET","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","UNKNOWN","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}