{"version":3,"file":"static/chunks/1795.d525efa3b639fb80.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageAlerts.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageHeader.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Alert,\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, RefreshState, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsBaseData} from '../asset-data/AssetBaseDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {useAllAssets} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetCatalogTableQuery} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {usePageLoadTrace} from '../performance';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const {assets, query, error, loading} = useAllAssets();\n  const refreshState = useRefreshAtInterval<any>({\n    refresh: query,\n    intervalMs: FIFTEEN_SECONDS,\n    leading: true,\n  });\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (assets) {\n      return groupAssets(assets);\n    }\n    return [];\n  }, [assets]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const orderedAssets = React.useMemo(\n    () => groupedAssets.flatMap((group) => group.assets.map((asset) => asset.key)) ?? [],\n    [groupedAssets],\n  );\n  const {liveDataByNode} = useAssetsBaseData(orderedAssets, 'OverviewAssetsRoot');\n  const trace = usePageLoadTrace('OverviewAssetsRoot');\n  const isFullyLoaded = Object.keys(liveDataByNode).length === orderedAssets.length;\n  React.useEffect(() => {\n    if (isFullyLoaded) {\n      trace.endTrace();\n    }\n  }, [isFullyLoaded, trace]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    if (loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (error) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={error} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n        <Box padding={{horizontal: 24, vertical: 16}} border=\"top\">\n          <Alert\n            intent=\"info\"\n            title=\"This Assets tab will be removed in an upcoming release.\"\n            description={\n              <>\n                Use the <Link to=\"/asset-groups\">global asset lineage page</Link> to view grouped\n                asset status details.\n              </>\n            }\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nconst VirtualHeaderRow = () => (\n  <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n    <HeaderCell>Group name</HeaderCell>\n    <HeaderCell>Missing</HeaderCell>\n    <HeaderCell>Failed/Overdue</HeaderCell>\n    <HeaderCell>In progress</HeaderCell>\n    <HeaderCell>Materialized</HeaderCell>\n  </HeaderRow>\n);\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsBaseData(assetKeys);\n  const trace = usePageLoadTrace('OverviewAssetsRoot:GroupBatch');\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  React.useEffect(() => {\n    if (!isBatchStillLoading) {\n      trace.endTrace();\n    }\n  }, [trace, isBatchStillLoading]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {componentStub} from '../app/InjectedComponentContext';\n\nexport const OverviewPageAlerts = componentStub('OverviewPageAlerts');\n","import {QueryResult} from '@apollo/client';\nimport {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, RefreshState} from '../app/QueryRefresh';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: RefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {flagSettingsPage} = useFeatureFlags();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {enableAssetHealthOverviewPreview} = useContext(AssetFeatureContext);\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Timeline\" to=\"/overview/activity\" />\n        {enableAssetHealthOverviewPreview && (\n          <TabLink id=\"asset-health\" title=\"Asset health\" to=\"/overview/asset-health\" />\n        )}\n        {/* These are flagged individually because the links must be children of `Tabs`: */}\n        {flagSettingsPage ? null : <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />}\n        {flagSettingsPage ? null : (\n          <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        )}\n        {flagSettingsPage ? null : <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />}\n        {!flagSettingsPage && automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        {flagSettingsPage ? null : (\n          <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n        )}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {OverviewPageAlerts} from './OverviewPageAlerts';\nimport {OverviewTabs} from './OverviewTabs';\n\nexport const OverviewPageHeader = ({\n  tab,\n  queryData,\n  refreshState,\n  ...rest\n}: React.ComponentProps<typeof OverviewTabs> &\n  Omit<React.ComponentProps<typeof PageHeader>, 'title'>) => {\n  return (\n    <PageHeader\n      title={<Heading>Overview</Heading>}\n      tabs={\n        <Box flex={{direction: 'column', gap: 8}}>\n          <OverviewTabs tab={tab} queryData={queryData} refreshState={refreshState} />\n          <OverviewPageAlerts />\n        </Box>\n      }\n      {...rest}\n    />\n  );\n};\n","import {useCallback, useMemo} from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {useMemo} from 'react';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {InstigationStatus, RunStatus, RunsFilter} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, Button, ButtonGroup, ErrorBoundary, TextInput} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, RefreshState, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {usePageLoadTrace} from '../performance';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {HourWindow, useHourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n  const trace = usePageLoadTrace('OverviewTimelineRoot');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (!initialLoading) {\n      trace.endTrace();\n    }\n  }, [initialLoading, trace]);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {TabButton && <TabButton selected=\"timeline\" />}\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <OverviewPageHeader tab=\"activity\" refreshState={refreshState} />\n    ),\n    [],\n  );\n\n  const [_defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const {enableAssetHealthOverviewPreview} = React.useContext(AssetFeatureContext);\n  const defaultTab = enableAssetHealthOverviewPreview ? 'timeline' : _defaultTab;\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (enableAssetHealthOverviewPreview) {\n        return null;\n      }\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab, enableAssetHealthOverviewPreview],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        {!enableAssetHealthOverviewPreview && (\n          <Route path=\"/overview/activity/assets\">\n            <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n          </Route>\n        )}\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {OverviewTabs} from './OverviewTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {JobsPageContent} from '../jobs/JobsPageContent';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"jobs\" />} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedResourceHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={\n                      row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                    }\n                    placement=\"top\"\n                  >\n                    <Tag>{row.resourceCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"resources\" refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSchedules} from './OverviewSchedules';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"schedules\" />\n      <OverviewSchedules />\n    </Box>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSensors} from './OverviewSensors';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"sensors\" />\n      <OverviewSensors />\n    </Box>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {GlobalAutomaterializationContent} from './GlobalAutomaterializationContent';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../../overview/OverviewPageHeader';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to the Sensors overview.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/overview/sensors\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Auto-materialize');\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"amp\" />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\n\nimport {InstanceBackfills} from './InstanceBackfills';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../overview/OverviewPageHeader';\n\nexport const InstanceBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"backfills\" />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {useFeatureFlags} from '../app/Flags';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfillsRoot} from '../instance/InstanceBackfillsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  const {flagSettingsPage} = useFeatureFlags();\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route\n        path=\"/overview/jobs\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/jobs\" /> : <OverviewJobsRoot />)}\n      />\n      <Route\n        path=\"/overview/schedules\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/schedules\" /> : <OverviewSchedulesRoot />\n        }\n      />\n      <Route\n        path=\"/overview/sensors\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/sensors\" /> : <OverviewSensorsRoot />\n        }\n      />\n      <Route\n        path=\"/overview/automation\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation\" /> : <AutomaterializationRoot />\n        }\n      />\n      <Route\n        path=\"/overview/backfills/:backfillId\"\n        render={({match}) =>\n          flagSettingsPage ? (\n            <Redirect to={`/automation/backfills/${match.params.backfillId}`} />\n          ) : (\n            <BackfillPage />\n          )\n        }\n      />\n      <Route\n        path=\"/overview/backfills\"\n        exact\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/backfills\" /> : <InstanceBackfillsRoot />\n        }\n      />\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["RepoFilterButton","useContext","WorkspaceContext","allRepos","visibleRepos","toggleVisible","useState","open","setOpen","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","jsx","DialogHeader","icon","label","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","Box","padding","top","Button","intent","onClick","outlined","Icon","name","rightIcon","length","concat","OverviewJobsTable","param","repos","parentRef","useRef","allKeys","useMemo","map","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","div","overflow","Container","ref","VirtualizedJobHeader","Inner","$totalHeight","index","key","size","start","RepoRow","height","expanded","showLocation","has","rightElement","Tooltip","content","placement","Tag","VirtualizedJobRow","JobsPageContent","loading","useQueryPersistedState","queryKey","defaults","search","searchValue","setSearchValue","repoCount","queryResultOverview","useQuery","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","data","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","visibleKeys","visibleRepoKeys","buildBuckets","filter","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","horizontal","vertical","flex","direction","alignItems","justifyContent","grow","gap","TextInput","value","SearchInputSpinner","tooltipContent","undefined","onChange","e","target","placeholder","QueryRefreshCountdown","SpinnerWithText","paddingTop","Spinner","purpose","color","Colors","anyReposHidden","NonIdealState","title","description","strong","workspaceOrError","__typename","entries","locationEntries","entry","locationOrLoadError","buckets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","repositories","Symbol","iterator","repo","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","err","return","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","OverviewAssetsRoot","Header","TabButton","useTrackPageView","useDocumentTitle","useAllAssets","assets","query","error","useRefreshAtInterval","refresh","intervalMs","leading","groupedAssetsUnfiltered","React","groups","asset","definition","groupName","repositoryName","repository","Object","values","decode","qs","searchQuery","JSON","parse","encode","stringify","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","orderedAssets","flatMap","liveDataByNode","useAssetsBaseData","trace","usePageLoadTrace","isFullyLoaded","keys","endTrace","position","zIndex","border","Alert","Link","to","PythonErrorInfo","VirtualHeaderRow","VirtualRow","TEMPLATE_COLUMNS","HeaderRow","templateColumns","sticky","HeaderCell","assetKeys","path","statuses","groupAssetsByStatus","find","location","useViewport","containerProps","viewport","isBatchStillLoading","zeroOrBlank","Row","$height","$start","RowGrid","Cell","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","status","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","display","inprogress","MATERIALIZING","numMaterializing","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","styled","children","RowCell","withConfig","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","OverviewPageAlerts","componentStub","OverviewTabs","props","tab","flagSettingsPage","useFeatureFlags","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","enableAssetHealthOverviewPreview","AssetFeatureContext","Tabs","selectedTabId","TabLink","id","paused","bottom","OverviewPageHeader","_param","queryData","rest","PageHeader","Heading","tabs","useHourWindow","defaultValue","validate","useCallback","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","end","startSec","endSec","RUN_TIMELINE_QUERY","variables","inProgressFilter","_object_spread_props","_","_object_spread","RunStatus","CANCELING","STARTED","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","runsByJobKey","now","Date","_to_consumable_array","results","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","_loop","locationEntry","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","timestamp","isAdHoc","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","runs","workspacePipelinePath","repoName","repoLocation","earliest","reduce","accum","Math","startTimes","_define_property","min","sort","a","b","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","setNow","offsetMsec","setOffsetMsec","timer","setInterval","clearInterval","onPageEarlier","onPageLater","onPageNow","Number","LOOKAHEAD_HOURS","visibleJobKeys","searchLower","repositoryLocation","Set","visibleJobs","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","header","json","_defaultTab","setDefaultTab","defaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","OverviewJobsRoot","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","OverviewSchedulesRoot","OverviewSchedules","OverviewSensorsRoot","OverviewSensors","AutomaterializationRoot","GlobalAutomaterializationRoot","assertUnreachable","Page","GlobalAutomaterializationContent","InstanceBackfillsRoot","InstanceBackfills","OverviewRoot","match","params","backfillId","BackfillPage","exact","overview_OverviewRoot"],"sourceRoot":""}