{"version":3,"file":"static/chunks/7913.37582dfede50dff9.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedules.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensors.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useCallback, useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Spinner, Subtitle2, Table} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const [statusState, setStatusState] = useQueryPersistedState<Set<BulkActionStatus>>({\n    encode: (vals) => ({status: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.status?.split(',') as BulkActionStatus[]) || []),\n  });\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n    state: statusState,\n    onStateChanged: setStatusState,\n  });\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Colors,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {useEffect, useReducer} from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.accentGreen()}} />\n      <div style={{background: Colors.accentRed()}} />\n      <div style={{background: Colors.accentBlue()}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.textLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = useReducer((s: number, _: any) => s + 1, 0);\n  useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedules.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewSchedules = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedSensorHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              );\n            }\n\n            const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n            return (\n              <VirtualizedSensorRow\n                key={key}\n                name={row.sensor.name}\n                sensorState={row.sensor.sensorState}\n                showCheckboxColumn={!!headerCheckbox}\n                checked={checkedKeys.has(sensorKey)}\n                onToggleChecked={onToggleCheckFactory(sensorKey)}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSensorsQuery, OverviewSensorsQueryVariables} from './types/OverviewSensors.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RootWorkspaceQuery} from '../workspace/types/WorkspaceContext.types';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensors = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [sensorTypes, setSensorTypes] = useQueryPersistedState<Set<SensorType>>({\n    encode: (vals) => ({sensorType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.sensorType?.split(',') as SensorType[]) || []),\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data: currentData, loading} = queryResultOverview;\n  const data =\n    currentData ??\n    (cachedData?.workspaceOrError.__typename === 'Workspace'\n      ? (cachedData as Extract<typeof cachedData, {workspaceOrError: {__typename: 'Workspace'}}>)\n      : null);\n\n  useBlockTraceOnQueryResult(queryResultOverview, 'OverviewSensorsQuery');\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Tooltip\n            content=\"You do not have permission to start or stop these schedules\"\n            canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n            placement=\"top-end\"\n            useDisabledButtonTooltipFix\n          >\n            <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n          </Tooltip>\n        </Box>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={currentData?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\nconst buildBuckets = (data?: null | OverviewSensorsQuery | RootWorkspaceQuery) => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n"],"names":["InstanceAutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","useCallback","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","ASSET_DAEMON_TICKS_QUERY","variables","useMemo","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","id","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","useEffect","start","timestamp","end","endTimestamp","undefined","jsx_runtime","jsx","AutomaterializationEvaluationHistoryTable","loading","GlobalAutomaterializationContent","automaterialize","useAutomaterializeDaemonStatus","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useState","isPaused","setIsPaused","timeRange","getVariables","now","Date","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","useLazyQuery","fetch","refresh","_async_to_generator","_","_state","sent","useRefreshAtInterval","enabled","intervalMs","leading","selectedTick","view","cursor","tableView","previousData","allTicks","map","tick","index","nextTick","isStuckStartedTick","copy","_object_spread","status","concat","onHoverTick","jsxs","Fragment","Box","padding","vertical","horizontal","flex","direction","gap","Alert","intent","title","description","a","href","target","rel","Table","tbody","tr","td","Spinner","purpose","Checkbox","format","checked","paused","disabled","onChange","e","setPaused","border","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","justifyContent","alignItems","div","style","color","Colors","labelForBackfillStatus","key","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","label","value","match","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","vals","size","join","qs","split","statusState","setStatusState","statusFilter","useStaticSetFilter","name","icon","allValues","allowMultipleSelections","closeOnSelect","renderLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","getStringValue","state","onStateChanged","useFilters","filters","button","activeFiltersJsx","BACKFILLS_QUERY","result","partitionBackfillsOrError","__typename","results","refreshState","FIFTEEN_SECONDS","QueryRefreshCountdown","content","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","slice","refetch","margin","top","CursorPaginationControls","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","includes","Page","PageHeader","Heading","Link","to","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","push","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_26__","assetKey","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","assetDetailsPathForKey","wrap","Detail","detail","Timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","thead","th","width","assetBackfillStatuses","asset","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","ButtonLink","onClick","path","StatusBar","Tag","minWidth","Label","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","styled","withConfig","useReducer","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewScheduleTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","parentRef","React","allKeys","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggle","onToggleAll","flattened","flat","forEach","schedules","type","scheduleCount","repoKey","schedule","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","Container","ref","VirtualizedScheduleHeader","checkbox","Inner","$totalHeight","RepoRow","expanded","showLocation","has","rightElement","Tooltip","placement","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","scheduleState","showCheckboxColumn","onToggleChecked","OverviewSchedules","useContext","WorkspaceContext","allRepos","visibleRepos","repoCount","defaults","search","searchValue","setSearchValue","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","queryResultOverview","OVERVIEW_SCHEDULES_QUERY","fetchPolicy","notifyOnNetworkStatusChange","repoBuckets","visibleKeys","visibleRepoKeys","buildBuckets","filteredBuckets","_param","rest","_object_spread_props","runningState","sanitizedSearch","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","showSearchSpinner","workspaceLoading","filterButton","TextInput","SearchInputSpinner","tooltipContent","placeholder","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","SchedulerInfo","paddingTop","anyReposHidden","CheckAllBox","totalCount","strong","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","buckets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","repositories","Symbol","iterator","repo","buildRepoAddress","scheduleNames","err","return","sortRepoBuckets","BASIC_INSTIGATION_STATE_FRAGMENT","_obj","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","SENSOR_TYPE_TO_FILTER","_define_property","SensorType","ASSET","AUTO_MATERIALIZE","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","values","OverviewSensors","sensorType","sensorTypes","setSensorTypes","sensorTypeFilter","OVERVIEW_SENSORS_QUERY","currentData","cachedData","useBlockTraceOnQueryResult","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","grow","SensorBulkActionMenu","SensorInfo","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_1__","sort","b","aString","bString","localeCompare","option","repository","repositoryLocation","useDelayedState","delayMsec","ready","setReady","timer","setTimeout","clearTimeout","props"],"sourceRoot":""}